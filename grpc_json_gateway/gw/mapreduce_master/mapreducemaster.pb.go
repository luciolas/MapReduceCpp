// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.0
// source: mapreducemaster.proto

package mapreduce_master

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type JobStatus_Status int32

const (
	JobStatus_IDLE    JobStatus_Status = 0
	JobStatus_WORKING JobStatus_Status = 1
	JobStatus_DONE    JobStatus_Status = 2
	JobStatus_ERR     JobStatus_Status = 4
)

// Enum value maps for JobStatus_Status.
var (
	JobStatus_Status_name = map[int32]string{
		0: "IDLE",
		1: "WORKING",
		2: "DONE",
		4: "ERR",
	}
	JobStatus_Status_value = map[string]int32{
		"IDLE":    0,
		"WORKING": 1,
		"DONE":    2,
		"ERR":     4,
	}
)

func (x JobStatus_Status) Enum() *JobStatus_Status {
	p := new(JobStatus_Status)
	*p = x
	return p
}

func (x JobStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mapreducemaster_proto_enumTypes[0].Descriptor()
}

func (JobStatus_Status) Type() protoreflect.EnumType {
	return &file_mapreducemaster_proto_enumTypes[0]
}

func (x JobStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus_Status.Descriptor instead.
func (JobStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_mapreducemaster_proto_rawDescGZIP(), []int{0, 0}
}

type JobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status JobStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mapreduce_master.JobStatus_Status" json:"status,omitempty"`
	Id     uint32           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	JobId  uint32           `protobuf:"varint,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *JobStatus) Reset() {
	*x = JobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapreducemaster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatus) ProtoMessage() {}

func (x *JobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mapreducemaster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatus.ProtoReflect.Descriptor instead.
func (*JobStatus) Descriptor() ([]byte, []int) {
	return file_mapreducemaster_proto_rawDescGZIP(), []int{0}
}

func (x *JobStatus) GetStatus() JobStatus_Status {
	if x != nil {
		return x.Status
	}
	return JobStatus_IDLE
}

func (x *JobStatus) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *JobStatus) GetJobId() uint32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

var File_mapreducemaster_proto protoreflect.FileDescriptor

var file_mapreducemaster_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x6d, 0x61, 0x70, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa2, 0x01, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x22, 0x32, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x45,
	0x52, 0x52, 0x10, 0x04, 0x32, 0x8c, 0x05, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x1c,
	0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x6d,
	0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x2f, 0x6a, 0x6f, 0x62, 0x3a, 0x01, 0x2a, 0x12, 0x60, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x2f, 0x6a, 0x6f, 0x62, 0x12, 0x77, 0x0a, 0x11, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a,
	0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x70,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22,
	0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x3a,
	0x01, 0x2a, 0x12, 0x79, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x17, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x70, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x7b,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x74, 0x0a,
	0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x61,
	0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d,
	0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x3a, 0x01,
	0x2a, 0x28, 0x01, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x3b, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_mapreducemaster_proto_rawDescOnce sync.Once
	file_mapreducemaster_proto_rawDescData = file_mapreducemaster_proto_rawDesc
)

func file_mapreducemaster_proto_rawDescGZIP() []byte {
	file_mapreducemaster_proto_rawDescOnce.Do(func() {
		file_mapreducemaster_proto_rawDescData = protoimpl.X.CompressGZIP(file_mapreducemaster_proto_rawDescData)
	})
	return file_mapreducemaster_proto_rawDescData
}

var file_mapreducemaster_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mapreducemaster_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_mapreducemaster_proto_goTypes = []interface{}{
	(JobStatus_Status)(0), // 0: mapreduce_master.JobStatus.Status
	(*JobStatus)(nil),     // 1: mapreduce_master.JobStatus
	(*JobMessage)(nil),    // 2: mapreduce_common.JobMessage
	(*MetaData)(nil),      // 3: mapreduce_common.MetaData
	(*Chunk)(nil),         // 4: mapreduce_common.Chunk
	(*UploadRequest)(nil), // 5: mapreduce_common.UploadRequest
	(*EmptyMessage)(nil),  // 6: mapreduce_common.EmptyMessage
}
var file_mapreducemaster_proto_depIdxs = []int32{
	0, // 0: mapreduce_master.JobStatus.status:type_name -> mapreduce_master.JobStatus.Status
	1, // 1: mapreduce_master.MapReduceMaster.ReportStatus:input_type -> mapreduce_master.JobStatus
	2, // 2: mapreduce_master.MapReduceMaster.Job:input_type -> mapreduce_common.JobMessage
	1, // 3: mapreduce_master.MapReduceMaster.GetStatus:input_type -> mapreduce_master.JobStatus
	3, // 4: mapreduce_master.MapReduceMaster.RequestUploadFile:input_type -> mapreduce_common.MetaData
	4, // 5: mapreduce_master.MapReduceMaster.UploadFile:input_type -> mapreduce_common.Chunk
	5, // 6: mapreduce_master.MapReduceMaster.StreamFile:input_type -> mapreduce_common.UploadRequest
	6, // 7: mapreduce_master.MapReduceMaster.ReportStatus:output_type -> mapreduce_common.EmptyMessage
	1, // 8: mapreduce_master.MapReduceMaster.Job:output_type -> mapreduce_master.JobStatus
	1, // 9: mapreduce_master.MapReduceMaster.GetStatus:output_type -> mapreduce_master.JobStatus
	1, // 10: mapreduce_master.MapReduceMaster.RequestUploadFile:output_type -> mapreduce_master.JobStatus
	1, // 11: mapreduce_master.MapReduceMaster.UploadFile:output_type -> mapreduce_master.JobStatus
	1, // 12: mapreduce_master.MapReduceMaster.StreamFile:output_type -> mapreduce_master.JobStatus
	7, // [7:13] is the sub-list for method output_type
	1, // [1:7] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_mapreducemaster_proto_init() }
func file_mapreducemaster_proto_init() {
	if File_mapreducemaster_proto != nil {
		return
	}
	file_mapreduce_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mapreducemaster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mapreducemaster_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mapreducemaster_proto_goTypes,
		DependencyIndexes: file_mapreducemaster_proto_depIdxs,
		EnumInfos:         file_mapreducemaster_proto_enumTypes,
		MessageInfos:      file_mapreducemaster_proto_msgTypes,
	}.Build()
	File_mapreducemaster_proto = out.File
	file_mapreducemaster_proto_rawDesc = nil
	file_mapreducemaster_proto_goTypes = nil
	file_mapreducemaster_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MapReduceMasterClient is the client API for MapReduceMaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MapReduceMasterClient interface {
	ReportStatus(ctx context.Context, in *JobStatus, opts ...grpc.CallOption) (*EmptyMessage, error)
	Job(ctx context.Context, in *JobMessage, opts ...grpc.CallOption) (*JobStatus, error)
	GetStatus(ctx context.Context, in *JobStatus, opts ...grpc.CallOption) (*JobStatus, error)
	RequestUploadFile(ctx context.Context, in *MetaData, opts ...grpc.CallOption) (*JobStatus, error)
	UploadFile(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*JobStatus, error)
	StreamFile(ctx context.Context, opts ...grpc.CallOption) (MapReduceMaster_StreamFileClient, error)
}

type mapReduceMasterClient struct {
	cc grpc.ClientConnInterface
}

func NewMapReduceMasterClient(cc grpc.ClientConnInterface) MapReduceMasterClient {
	return &mapReduceMasterClient{cc}
}

func (c *mapReduceMasterClient) ReportStatus(ctx context.Context, in *JobStatus, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/mapreduce_master.MapReduceMaster/ReportStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapReduceMasterClient) Job(ctx context.Context, in *JobMessage, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/mapreduce_master.MapReduceMaster/Job", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapReduceMasterClient) GetStatus(ctx context.Context, in *JobStatus, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/mapreduce_master.MapReduceMaster/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapReduceMasterClient) RequestUploadFile(ctx context.Context, in *MetaData, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/mapreduce_master.MapReduceMaster/RequestUploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapReduceMasterClient) UploadFile(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/mapreduce_master.MapReduceMaster/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapReduceMasterClient) StreamFile(ctx context.Context, opts ...grpc.CallOption) (MapReduceMaster_StreamFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MapReduceMaster_serviceDesc.Streams[0], "/mapreduce_master.MapReduceMaster/StreamFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &mapReduceMasterStreamFileClient{stream}
	return x, nil
}

type MapReduceMaster_StreamFileClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*JobStatus, error)
	grpc.ClientStream
}

type mapReduceMasterStreamFileClient struct {
	grpc.ClientStream
}

func (x *mapReduceMasterStreamFileClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mapReduceMasterStreamFileClient) CloseAndRecv() (*JobStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(JobStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MapReduceMasterServer is the server API for MapReduceMaster service.
type MapReduceMasterServer interface {
	ReportStatus(context.Context, *JobStatus) (*EmptyMessage, error)
	Job(context.Context, *JobMessage) (*JobStatus, error)
	GetStatus(context.Context, *JobStatus) (*JobStatus, error)
	RequestUploadFile(context.Context, *MetaData) (*JobStatus, error)
	UploadFile(context.Context, *Chunk) (*JobStatus, error)
	StreamFile(MapReduceMaster_StreamFileServer) error
}

// UnimplementedMapReduceMasterServer can be embedded to have forward compatible implementations.
type UnimplementedMapReduceMasterServer struct {
}

func (*UnimplementedMapReduceMasterServer) ReportStatus(context.Context, *JobStatus) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStatus not implemented")
}
func (*UnimplementedMapReduceMasterServer) Job(context.Context, *JobMessage) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Job not implemented")
}
func (*UnimplementedMapReduceMasterServer) GetStatus(context.Context, *JobStatus) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedMapReduceMasterServer) RequestUploadFile(context.Context, *MetaData) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestUploadFile not implemented")
}
func (*UnimplementedMapReduceMasterServer) UploadFile(context.Context, *Chunk) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (*UnimplementedMapReduceMasterServer) StreamFile(MapReduceMaster_StreamFileServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFile not implemented")
}

func RegisterMapReduceMasterServer(s *grpc.Server, srv MapReduceMasterServer) {
	s.RegisterService(&_MapReduceMaster_serviceDesc, srv)
}

func _MapReduceMaster_ReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceMasterServer).ReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapreduce_master.MapReduceMaster/ReportStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceMasterServer).ReportStatus(ctx, req.(*JobStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapReduceMaster_Job_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceMasterServer).Job(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapreduce_master.MapReduceMaster/Job",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceMasterServer).Job(ctx, req.(*JobMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapReduceMaster_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceMasterServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapreduce_master.MapReduceMaster/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceMasterServer).GetStatus(ctx, req.(*JobStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapReduceMaster_RequestUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceMasterServer).RequestUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapreduce_master.MapReduceMaster/RequestUploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceMasterServer).RequestUploadFile(ctx, req.(*MetaData))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapReduceMaster_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceMasterServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapreduce_master.MapReduceMaster/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceMasterServer).UploadFile(ctx, req.(*Chunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapReduceMaster_StreamFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MapReduceMasterServer).StreamFile(&mapReduceMasterStreamFileServer{stream})
}

type MapReduceMaster_StreamFileServer interface {
	SendAndClose(*JobStatus) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type mapReduceMasterStreamFileServer struct {
	grpc.ServerStream
}

func (x *mapReduceMasterStreamFileServer) SendAndClose(m *JobStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mapReduceMasterStreamFileServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MapReduceMaster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mapreduce_master.MapReduceMaster",
	HandlerType: (*MapReduceMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportStatus",
			Handler:    _MapReduceMaster_ReportStatus_Handler,
		},
		{
			MethodName: "Job",
			Handler:    _MapReduceMaster_Job_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _MapReduceMaster_GetStatus_Handler,
		},
		{
			MethodName: "RequestUploadFile",
			Handler:    _MapReduceMaster_RequestUploadFile_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _MapReduceMaster_UploadFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFile",
			Handler:       _MapReduceMaster_StreamFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mapreducemaster.proto",
}
