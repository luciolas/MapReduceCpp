// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mapreduceworker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mapreduceworker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mapreduceworker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mapreduce_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mapreduceworker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mapreduceworker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mapreduceworker_2eproto;
namespace mapreduce_worker {
class JobMessage;
class JobMessageDefaultTypeInternal;
extern JobMessageDefaultTypeInternal _JobMessage_default_instance_;
}  // namespace mapreduce_worker
PROTOBUF_NAMESPACE_OPEN
template<> ::mapreduce_worker::JobMessage* Arena::CreateMaybeMessage<::mapreduce_worker::JobMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mapreduce_worker {

enum JobMessage_Phase : int {
  JobMessage_Phase_MAP = 0,
  JobMessage_Phase_REDUCE = 1,
  JobMessage_Phase_JobMessage_Phase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JobMessage_Phase_JobMessage_Phase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JobMessage_Phase_IsValid(int value);
constexpr JobMessage_Phase JobMessage_Phase_Phase_MIN = JobMessage_Phase_MAP;
constexpr JobMessage_Phase JobMessage_Phase_Phase_MAX = JobMessage_Phase_REDUCE;
constexpr int JobMessage_Phase_Phase_ARRAYSIZE = JobMessage_Phase_Phase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobMessage_Phase_descriptor();
template<typename T>
inline const std::string& JobMessage_Phase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JobMessage_Phase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JobMessage_Phase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JobMessage_Phase_descriptor(), enum_t_value);
}
inline bool JobMessage_Phase_Parse(
    const std::string& name, JobMessage_Phase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JobMessage_Phase>(
    JobMessage_Phase_descriptor(), name, value);
}
// ===================================================================

class JobMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapreduce_worker.JobMessage) */ {
 public:
  inline JobMessage() : JobMessage(nullptr) {};
  virtual ~JobMessage();

  JobMessage(const JobMessage& from);
  JobMessage(JobMessage&& from) noexcept
    : JobMessage() {
    *this = ::std::move(from);
  }

  inline JobMessage& operator=(const JobMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobMessage& operator=(JobMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobMessage* internal_default_instance() {
    return reinterpret_cast<const JobMessage*>(
               &_JobMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JobMessage& a, JobMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(JobMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobMessage* New() const final {
    return CreateMaybeMessage<JobMessage>(nullptr);
  }

  JobMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobMessage& from);
  void MergeFrom(const JobMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapreduce_worker.JobMessage";
  }
  protected:
  explicit JobMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mapreduceworker_2eproto);
    return ::descriptor_table_mapreduceworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef JobMessage_Phase Phase;
  static constexpr Phase MAP =
    JobMessage_Phase_MAP;
  static constexpr Phase REDUCE =
    JobMessage_Phase_REDUCE;
  static inline bool Phase_IsValid(int value) {
    return JobMessage_Phase_IsValid(value);
  }
  static constexpr Phase Phase_MIN =
    JobMessage_Phase_Phase_MIN;
  static constexpr Phase Phase_MAX =
    JobMessage_Phase_Phase_MAX;
  static constexpr int Phase_ARRAYSIZE =
    JobMessage_Phase_Phase_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Phase_descriptor() {
    return JobMessage_Phase_descriptor();
  }
  template<typename T>
  static inline const std::string& Phase_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Phase>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Phase_Name.");
    return JobMessage_Phase_Name(enum_t_value);
  }
  static inline bool Phase_Parse(const std::string& name,
      Phase* value) {
    return JobMessage_Phase_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kPhaseFieldNumber = 2,
    kNReduceFieldNumber = 3,
    kNMapFieldNumber = 4,
  };
  // repeated string input = 1;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  const std::string& input(int index) const;
  std::string* mutable_input(int index);
  void set_input(int index, const std::string& value);
  void set_input(int index, std::string&& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  std::string* add_input();
  void add_input(const std::string& value);
  void add_input(std::string&& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input();
  private:
  const std::string& _internal_input(int index) const;
  std::string* _internal_add_input();
  public:

  // .mapreduce_worker.JobMessage.Phase phase = 2;
  void clear_phase();
  ::mapreduce_worker::JobMessage_Phase phase() const;
  void set_phase(::mapreduce_worker::JobMessage_Phase value);
  private:
  ::mapreduce_worker::JobMessage_Phase _internal_phase() const;
  void _internal_set_phase(::mapreduce_worker::JobMessage_Phase value);
  public:

  // int32 nReduce = 3;
  void clear_nreduce();
  ::PROTOBUF_NAMESPACE_ID::int32 nreduce() const;
  void set_nreduce(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nreduce() const;
  void _internal_set_nreduce(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nMap = 4;
  void clear_nmap();
  ::PROTOBUF_NAMESPACE_ID::int32 nmap() const;
  void set_nmap(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nmap() const;
  void _internal_set_nmap(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mapreduce_worker.JobMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_;
  int phase_;
  ::PROTOBUF_NAMESPACE_ID::int32 nreduce_;
  ::PROTOBUF_NAMESPACE_ID::int32 nmap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mapreduceworker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JobMessage

// repeated string input = 1;
inline int JobMessage::_internal_input_size() const {
  return input_.size();
}
inline int JobMessage::input_size() const {
  return _internal_input_size();
}
inline void JobMessage::clear_input() {
  input_.Clear();
}
inline std::string* JobMessage::add_input() {
  // @@protoc_insertion_point(field_add_mutable:mapreduce_worker.JobMessage.input)
  return _internal_add_input();
}
inline const std::string& JobMessage::_internal_input(int index) const {
  return input_.Get(index);
}
inline const std::string& JobMessage::input(int index) const {
  // @@protoc_insertion_point(field_get:mapreduce_worker.JobMessage.input)
  return _internal_input(index);
}
inline std::string* JobMessage::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:mapreduce_worker.JobMessage.input)
  return input_.Mutable(index);
}
inline void JobMessage::set_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mapreduce_worker.JobMessage.input)
  input_.Mutable(index)->assign(value);
}
inline void JobMessage::set_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mapreduce_worker.JobMessage.input)
  input_.Mutable(index)->assign(std::move(value));
}
inline void JobMessage::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mapreduce_worker.JobMessage.input)
}
inline void JobMessage::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mapreduce_worker.JobMessage.input)
}
inline std::string* JobMessage::_internal_add_input() {
  return input_.Add();
}
inline void JobMessage::add_input(const std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mapreduce_worker.JobMessage.input)
}
inline void JobMessage::add_input(std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mapreduce_worker.JobMessage.input)
}
inline void JobMessage::add_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mapreduce_worker.JobMessage.input)
}
inline void JobMessage::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mapreduce_worker.JobMessage.input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JobMessage::input() const {
  // @@protoc_insertion_point(field_list:mapreduce_worker.JobMessage.input)
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JobMessage::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:mapreduce_worker.JobMessage.input)
  return &input_;
}

// .mapreduce_worker.JobMessage.Phase phase = 2;
inline void JobMessage::clear_phase() {
  phase_ = 0;
}
inline ::mapreduce_worker::JobMessage_Phase JobMessage::_internal_phase() const {
  return static_cast< ::mapreduce_worker::JobMessage_Phase >(phase_);
}
inline ::mapreduce_worker::JobMessage_Phase JobMessage::phase() const {
  // @@protoc_insertion_point(field_get:mapreduce_worker.JobMessage.phase)
  return _internal_phase();
}
inline void JobMessage::_internal_set_phase(::mapreduce_worker::JobMessage_Phase value) {
  
  phase_ = value;
}
inline void JobMessage::set_phase(::mapreduce_worker::JobMessage_Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:mapreduce_worker.JobMessage.phase)
}

// int32 nReduce = 3;
inline void JobMessage::clear_nreduce() {
  nreduce_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobMessage::_internal_nreduce() const {
  return nreduce_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobMessage::nreduce() const {
  // @@protoc_insertion_point(field_get:mapreduce_worker.JobMessage.nReduce)
  return _internal_nreduce();
}
inline void JobMessage::_internal_set_nreduce(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nreduce_ = value;
}
inline void JobMessage::set_nreduce(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nreduce(value);
  // @@protoc_insertion_point(field_set:mapreduce_worker.JobMessage.nReduce)
}

// int32 nMap = 4;
inline void JobMessage::clear_nmap() {
  nmap_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobMessage::_internal_nmap() const {
  return nmap_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobMessage::nmap() const {
  // @@protoc_insertion_point(field_get:mapreduce_worker.JobMessage.nMap)
  return _internal_nmap();
}
inline void JobMessage::_internal_set_nmap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nmap_ = value;
}
inline void JobMessage::set_nmap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nmap(value);
  // @@protoc_insertion_point(field_set:mapreduce_worker.JobMessage.nMap)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mapreduce_worker

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mapreduce_worker::JobMessage_Phase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mapreduce_worker::JobMessage_Phase>() {
  return ::mapreduce_worker::JobMessage_Phase_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mapreduceworker_2eproto
