// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mapreducemaster.proto

#include "mapreducemaster.pb.h"
#include "mapreducemaster.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mapreduce_master {

static const char* MapReduceMaster_method_names[] = {
  "/mapreduce_master.MapReduceMaster/ReportStatus",
};

std::unique_ptr< MapReduceMaster::Stub> MapReduceMaster::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MapReduceMaster::Stub> stub(new MapReduceMaster::Stub(channel));
  return stub;
}

MapReduceMaster::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ReportStatus_(MapReduceMaster_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MapReduceMaster::Stub::ReportStatus(::grpc::ClientContext* context, const ::mapreduce_master::JobStatus& request, ::mapreduce_common::EmptyMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReportStatus_, context, request, response);
}

void MapReduceMaster::Stub::experimental_async::ReportStatus(::grpc::ClientContext* context, const ::mapreduce_master::JobStatus* request, ::mapreduce_common::EmptyMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportStatus_, context, request, response, std::move(f));
}

void MapReduceMaster::Stub::experimental_async::ReportStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mapreduce_common::EmptyMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportStatus_, context, request, response, std::move(f));
}

void MapReduceMaster::Stub::experimental_async::ReportStatus(::grpc::ClientContext* context, const ::mapreduce_master::JobStatus* request, ::mapreduce_common::EmptyMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportStatus_, context, request, response, reactor);
}

void MapReduceMaster::Stub::experimental_async::ReportStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mapreduce_common::EmptyMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mapreduce_common::EmptyMessage>* MapReduceMaster::Stub::AsyncReportStatusRaw(::grpc::ClientContext* context, const ::mapreduce_master::JobStatus& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mapreduce_common::EmptyMessage>::Create(channel_.get(), cq, rpcmethod_ReportStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mapreduce_common::EmptyMessage>* MapReduceMaster::Stub::PrepareAsyncReportStatusRaw(::grpc::ClientContext* context, const ::mapreduce_master::JobStatus& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::mapreduce_common::EmptyMessage>::Create(channel_.get(), cq, rpcmethod_ReportStatus_, context, request, false);
}

MapReduceMaster::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapReduceMaster_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapReduceMaster::Service, ::mapreduce_master::JobStatus, ::mapreduce_common::EmptyMessage>(
          std::mem_fn(&MapReduceMaster::Service::ReportStatus), this)));
}

MapReduceMaster::Service::~Service() {
}

::grpc::Status MapReduceMaster::Service::ReportStatus(::grpc::ServerContext* context, const ::mapreduce_master::JobStatus* request, ::mapreduce_common::EmptyMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mapreduce_master

